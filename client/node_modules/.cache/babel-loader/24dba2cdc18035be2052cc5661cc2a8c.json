{"ast":null,"code":"import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"./actions\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      const [state, dispatch] = useStoreContext();\n      const {\n        categories\n      } = state;\n      const {\n        data: categoryData\n      } = useQuery(QUERY_CATEGORIES);\n      useEffect(() => {\n        // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n        if (categoryData) {\n          // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n          dispatch({\n            type: UPDATE_CATEGORIES,\n            categories: categoryData.categories\n          });\n        }\n      }, [categoryData, dispatch]);\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["C:/Users/patel/OneDrive/Documents/unit22/shop-shop/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","products","categories","dispatch","useStoreContext","data","categoryData","useQuery","QUERY_CATEGORIES","useEffect","currentCategory","useProductReducer","initialState"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,QAIS,WAJT;AAME,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKN,eAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;AAIF;;AACA,SAAKN,iBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFP,OAAP;;AAIA,SAAKN,uBAAL;AACE,YAAM,CAACE,KAAD,EAAQK,QAAR,IAAoBC,eAAe,EAAzC;AAEA,YAAM;AAAEF,QAAAA;AAAF,UAAiBJ,KAAvB;AAEA,YAAM;AAAEO,QAAAA,IAAI,EAAEC;AAAR,UAAyBC,QAAQ,CAACC,gBAAD,CAAvC;AACAC,MAAAA,SAAS,CAAC,MAAM;AACd;AACA,YAAIH,YAAJ,EAAkB;AAChB;AACAH,UAAAA,QAAQ,CAAC;AACPH,YAAAA,IAAI,EAAEL,iBADC;AAEPO,YAAAA,UAAU,EAAEI,YAAY,CAACJ;AAFlB,WAAD,CAAR;AAID;AACF,OATQ,EASN,CAACI,YAAD,EAAeH,QAAf,CATM,CAAT;AAWE,aAAO,EACL,GAAGL,KADE;AAELY,QAAAA,eAAe,EAAEX,MAAM,CAACW;AAFnB,OAAP;;AAIN;AACE,aAAOZ,KAAP;AAnCJ;AAqCD,CAtCM;AAuCP,OAAO,SAASa,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,SAAOnB,UAAU,CAACI,OAAD,EAAUe,YAAV,CAAjB;AACD","sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY\r\n  } from \"./actions\";\r\n  \r\n  export const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n      case UPDATE_PRODUCTS:\r\n        return {\r\n          ...state,\r\n          products: [...action.products]\r\n        };\r\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n      case UPDATE_CATEGORIES:\r\n        return {\r\n          ...state,\r\n          categories: [...action.categories]\r\n        };\r\n        case UPDATE_CURRENT_CATEGORY:\r\n          const [state, dispatch] = useStoreContext();\r\n\r\n          const { categories } = state;\r\n          \r\n          const { data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n          useEffect(() => {\r\n            // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n            if (categoryData) {\r\n              // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n              dispatch({\r\n                type: UPDATE_CATEGORIES,\r\n                categories: categoryData.categories\r\n              });\r\n            }\r\n          }, [categoryData, dispatch]);\r\n          \r\n            return {\r\n              ...state,\r\n              currentCategory: action.currentCategory\r\n            };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  export function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n  }"]},"metadata":{},"sourceType":"module"}